import cv2
import dlib
from scipy.spatial import distance
def calculate_EAR(eye):
	A = distance.euclidean(eye[1], eye[5])
	B = distance.euclidean(eye[2], eye[4])
	C = distance.euclidean(eye[0], eye[3])
	ear_aspect_ratio = (A+B)/(2.0*C)
	return ear_aspect_ratio

def calculate_MAR(mouth):
	A = distance.euclidean(mouth[1], mouth[9])
	B = distance.euclidean(mouth[3], mouth[7])
	C = distance.euclidean(mouth[2], mouth[8])
	D = distance.euclidean(mouth[5], mouth[11])
	mouth_aspect_ratio = (A+B+C)/(3.0*D)
	return mouth_aspect_ratio

cap = cv2.VideoCapture(0)
hog_face_detector = dlib.get_frontal_face_detector()
dlib_facelandmark = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")

while True:
    _, frame = cap.read()
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    faces = hog_face_detector(gray)
    for face in faces:

        face_landmarks = dlib_facelandmark(gray, face)
        leftEye = []
        rightEye = []
        Mouth= []

        for n in range(36,42):
        	x = face_landmarks.part(n).x
        	y = face_landmarks.part(n).y
        	leftEye.append((x,y))
        	next_point = n+1
        	if n == 41:
        		next_point = 36
        	x2 = face_landmarks.part(next_point).x
        	y2 = face_landmarks.part(next_point).y
        	cv2.line(frame,(x,y),(x2,y2),(0,255,0),1)

        for n in range(42,48):
        	x = face_landmarks.part(n).x
        	y = face_landmarks.part(n).y
        	rightEye.append((x,y))
        	next_point = n+1
        	if n == 47:
        		next_point = 42
        	x2 = face_landmarks.part(next_point).x
        	y2 = face_landmarks.part(next_point).y
        	cv2.line(frame,(x,y),(x2,y2),(0,255,0),1)

        for n in range(49,61):
        	x = face_landmarks.part(n).x
        	y = face_landmarks.part(n).y
        	Mouth.append((x,y))
        	next_point = n+1
        	if n == 60:
        		next_point = 49
        	x2 = face_landmarks.part(next_point).x
        	y2 = face_landmarks.part(next_point).y
        	cv2.line(frame,(x,y),(x2,y2),(0,255,0),1)

        left_ear = calculate_EAR(leftEye)
        right_ear = calculate_EAR(rightEye)
        mouth_ar= calculate_MAR(Mouth)

        EAR = (left_ear+right_ear)/2
        MAR=mouth_ar
        EAR = round(EAR,2)
        MAR = round(MAR,2)
        if (EAR<0.26 or MAR > 0.4):
        	cv2.putText(frame,"Drowsy state detected.",(30,30),
        		cv2.FONT_HERSHEY_SIMPLEX,1,(0,0,255),4)
        	print("Drowsy")
        print(EAR," ",MAR)

    cv2.imshow("Are you Sleepy", frame)

    key = cv2.waitKey(1)
    if key == 27:
        break
server.quit()
cap.release()
cv2.destroyAllWindows()
